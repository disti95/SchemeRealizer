## Arrays used in the backend

#### Class and UML:

array(name
     ,key
     ,modifier
     ,selected
     ,array keywords
     ,array extends
     ,array implements
     ,array parameter|const value|member value)

##### Keys

###### Classgen

 - 1: Attribute
 - 2: Getter
 - 3: Setter
 - 4: Method(E.g UML parsed methods)
 - 5: Class
 - 6: Interface
 
###### UMLgen

 - 1: Attributes
 - 2: Methods(There are not setter/getter)
 - 3: Class
 - 4: Interface

##### Explanation

 - name      : Name of Class, Interface, Attribute or Method
 - modifier  : Modifier which is used, private, protected or public
 - selected  : true = visible in frontend, otherwise invisible
 - keywords  : keywords e.g final, static, abstract or const
 - extends   : inheritance e.g array('/path/to/parent.php' => array('MyParent', true)), if true than the parent is visible in the frontend, otherwise it is invisible
 - implements: imlementation e.g array('/path/to/interface.php' => array('MyIFace', true), '/path/to/interface2.php' => array('MyIFace2, true)), if true than the interface is visible in the frontend, otherwise it is invisible
 - parameter : parameter used by a function e.g array('$name' => 'Michael', '$family' => array('Monika', 'Stefanie'))
               Also being used by default values concerning constants and class members e.g array('Michael', array('Monika', 'Stefanie'))
 
 #### SQL:
 
 array(name
      ,datatype
      ,size
      ,index
      ,null
      ,autoincrement
      ,selected
      ,default)
      
##### Explanation

 - name         : Name of the column
 - datatype     : Data type of the column, e.g integer, varchar,..
 - size         : Size of the column depending on the data type
 - index        : 1 = Primary, 2 = Unique index, 3 = Index
 - null         : 1 = Null, otherwise Not Null
 - autoincrement: 1 = AI, otherwise no AI column
 - selected     : column is visible in the frontend, otherwise it is invisible
 - default      : default value
 
 
#### MongoDB:

 array (TranslateTo
	   ,database
 	   ,array(
 	   	  colname =>
 			 array(
 			 	array(options-value),
 	   		 	,array(array(key-value-type))
 	   		)
 	   )
##### Explanation

 - TranslateTo  	  : NoSQL-based DBMS
 - database     	  : Database name
 - collection   	  : Collection name
 - array(o-v)	  	  : Options to specify the collection boundaries
 - array(array(k-v-t)): delivers the actual data, form is needed because of the JSON versatility
 
##### Structure Explanation

 - array(o-v)  : Collection parameter as key-value array, example = array("option":"value", "option2":"value2")
 - array(k-v-t): Array that contains arrays which hold the actual data, example array(array("k1","v1","t1"), array("k2","v2","t2))
				  
##### Usage of data Array (k-v-t)

 simple key-value pair: array(k-v-t) 
 Object 			  : array(array(k-v-t),array(k-v-t)) -> The big data array is also an "Object"
 Array				  : array(null,array(k-v-t),type)	 -> Array's can't contain key-value pairs, so they don't check the keys
 Array   	    	  : array(null,Object,type)	 	     -> Array's can contain further Objects but it's name won't be shown
 